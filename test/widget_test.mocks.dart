// Mocks generated by Mockito 5.4.4 from annotations
// in proviante_notes/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:proviante_notes/src/domain/entities/note.dart' as _i4;
import 'package:proviante_notes/src/domain/entities/note_sort_option.dart'
    as _i5;
import 'package:proviante_notes/src/domain/repositories/note_repository.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [NoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockNoteRepository extends _i1.Mock implements _i2.NoteRepository {
  MockNoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Note>> getNotes() => (super.noSuchMethod(
        Invocation.method(
          #getNotes,
          [],
        ),
        returnValue: _i3.Future<List<_i4.Note>>.value(<_i4.Note>[]),
      ) as _i3.Future<List<_i4.Note>>);

  @override
  _i3.Future<_i4.Note?> getNoteById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getNoteById,
          [id],
        ),
        returnValue: _i3.Future<_i4.Note?>.value(),
      ) as _i3.Future<_i4.Note?>);

  @override
  _i3.Future<void> addNote(_i4.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #addNote,
          [note],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> updateNote(_i4.Note? note) => (super.noSuchMethod(
        Invocation.method(
          #updateNote,
          [note],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> deleteNote(int? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteNote,
          [id],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Stream<List<_i4.Note>> watchAllNotes({
    _i5.NoteSortOption? sortOption = _i5.NoteSortOption.dateModifiedDescending,
    String? searchQuery = r'',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllNotes,
          [],
          {
            #sortOption: sortOption,
            #searchQuery: searchQuery,
          },
        ),
        returnValue: _i3.Stream<List<_i4.Note>>.empty(),
      ) as _i3.Stream<List<_i4.Note>>);

  @override
  _i3.Future<bool> noteTitleExists(
    String? title, {
    int? excludeId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #noteTitleExists,
          [title],
          {#excludeId: excludeId},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);
}
